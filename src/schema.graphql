type ShoppingCart {
    shoppingCartId: ID
    productsInShoppingCart: [Product]
    totalPrice: Int
}

type Product {
    articleNumber: Int
    productName: String
    productPrice: Int
}

type DeletedShoppingCartResponse {
	deletedShoppingCart: ID
	success: Boolean
}

type DeletedProductResponse {
	deletedProduct: ID
	success: Boolean
}

type AddedProductsResponse {
    addedProduct: Product
    success: Boolean
}

type Query {
    getShoppingCartById(shoppingCartId: ID!): ShoppingCart
    getProductById(articleNumber: Int!): Product
}

type Mutation {
    createShoppingCart(shoppingCartId: ID!, ProductsInShoppingCart: [ProductsInput!], totalPrice: Int): ID
    clearShoppingCart(shoppingCartId: ID!): DeletedShoppingCartResponse
    addProductTooShoppingCart(shoppingCart: ShoppingCartInput!, product: ProductsInput!): AddedProductsResponse
    deleteProductInShoppingCart(product: ProductsInput!, shoppingCart: ShoppingCartInput!): DeletedProductResponse
}

input ProductsInput {
    articleNumber: Int
    productName: String
    productPrice: Int
}

input ShoppingCartInput {
    shoppingCartId: ID!
    productsInShoppingCart: [ProductsInput!]!
    totalPrice: Int!
}